VIDEOS_URL = 'http://tve-atcnbce.nbcuni.com/live/3/syfy/containers/%s/iPad'

AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	(show_id, video_id) = url.split('#')[-1].split('|')

	for video in JSON.ObjectFromURL(VIDEOS_URL % show_id)['results']:

		if video['assetID'].endswith(video_id):

			if video['subtype'] == 'episode':

				return EpisodeObject(
					show = video['parentContainerTitle'],
					season = int(video['seasonNumber']),
					index = int(video['episodeNumber']),
					title = video['title'],
					summary = video['description'],
					duration = video['totalDuration'],
					thumb = video['images'][0]['images']['episode_banner'],
					originally_available_at = Datetime.FromTimestamp(video['firstAiredDate']).date()
				)

			elif video['subtype'] == 'clip':

				return VideoClipObject(
					title = video['title'],
					summary = video['description'],
					duration = video['totalDuration'],
					thumb = video['images'][0]['images']['episode_banner'],
					originally_available_at = Datetime.FromTimestamp(video['firstAiredDate']).date()
				)

	raise Ex.MediaNotAvailable

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = '720',
			aspect_ratio = '1.78',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	(show_id, video_id) = url.split('#')[-1].split('|')

	for video in JSON.ObjectFromURL(VIDEOS_URL % show_id)['results']:

		if video['assetID'].endswith(video_id):

			m3u8_url = video['videoURL']

			try:
				m3u8 = HTTP.Request(m3u8_url, cacheTime=10, follow_redirects=False).content
			except Ex.RedirectError, e:
				if 'Location' in e.headers:
					m3u8_url = e.headers['Location']
				else:
					raise Ex.MediaNotAvailable
			except Ex.HTTPError, e:
				if e.code == 403:
					raise Ex.MediaGeoblocked
				elif e.code == 404:
					raise Ex.MediaNotAvailable
				else:
					raise Ex.MediaNotAvailable
			except:
				raise Ex.MediaNotAvailable

			return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(m3u8_url))

	raise Ex.MediaNotAvailable
